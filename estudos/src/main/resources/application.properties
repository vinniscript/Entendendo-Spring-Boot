# Nome do projeto

spring.application.name=estudos

# Configuração da URl de conexão com o SQLite

# ----

# Aqui estamos dizendo para o Spring Boot que usaremos o banco de dados SQLite e o arquivo 'appteste.db'
spring.datasource.url=jdbc:sqlite:appteste.db
#jdbc:sqlite:: Este prefixo informa ao Spring que o tipo de conexão é JDBC [Java Database Connectivity]
# (um padrão de conexão Java para bancos de dados) e que o banco é SQLite.
# jdbc:sqlite:appteste.db: Aqui você coloca o caminho para o arquivo .db do SQLite que você quer usar. Exemplo:
# spring.datasource.url=jdbc:sqlite:C:/databases/myapp.db -> Pode ser um outro caminho na máquina
# Se não tiver o arquivo, ele é criado automáticamente

# ----

# Configuração do driver do SQLite

spring.datasource.driver-class-name=org.sqlite.JDBC
# spring.datasource.driver-class-name: especifica qual driver java será usado para conectar ao banco de dados.
# Pense nele como o "tradutor" que ajuda o java a se comunicar com o banco, o SQLite, nesse caso.

# ----

# Usuário e senha

# ----

# (Facultativo, pode omitir, se quiser)
spring.datasource.username=
spring.datasource.password=
# No SQLite, você não precisa de campos de um nome de usuário e senha. Esses campos são vazios, pois o SQLite não oferece
# suporte para autenticação por padrão

#----

# Dialeto SQL

# ----

# spring.jpa.database-platform: Define o dialeto SQL que o hibernate deve usar para falar com o SQLite
# O hibernate é uma ferramenta que ajuda a mapear objetos Java para tabelas de banco de dados e vice-versa.
# Ele usa as anotações '@' para mapear as classes Java para as tabelas do banco de dados, como @Entity, @Table, @Column, etc.
spring.jpa.database-platform=org.hibernate.dialect.SQLiteDialect
# org.hibernate.dialect.SQLiteDialect: é o dialeto SQL que o hibernate deve usar para falar com o SQLite.
# Ele traduz as consultas SQL que o hibernate gera para o SQLite entender.

# ----

# Desativa logs SQL longos e detalhados (opcional)

# ----

# Para enxergar o "por baixo dos panos" das querys traduzidas do hibernate para o SQLite, você pode ativar o log SQL
spring.jpa.show-sql=true
# spring.jpa.show-sql: Se você quiser ver as consultas SQL que o hibernate gera, você pode definir isso como true.
# isso é útil para depuração, mas pode ser irritante se você tiver muitas consultas SQL.
# Por padrão, isso é definido como false.

# ----

# Atualização automática do banco de dados

# ----

# spring.jpa.hibernate.ddl-auto: Define como o hibernate deve atualizar o banco de dados.
spring.jpa.hibernate.ddl-auto=update

# update: Atualiza o esquema do banco de dados, cria tabelas, etc. se necessário, mas não exclui dados existentes.
# create: Cria o esquema do banco de dados do zero, excluindo todos os dados existentes.
# create-drop: Cria o esquema do banco de dados e, em seguida, o descarta quando a sessão do hibernate é fechada.
    # Você pode usar isso para casos como testes de unidade, onde você deseja um banco de dados limpo a cada execução.
# validate: Valida o esquema do banco de dados, mas não faz alterações. É você quem faz as alterações manualmente.

# create e create-drop são úteis para testes de unidade, mas não são recomendados para produção, pois podem excluir dados importantes.

# ----


